{
  "tasks": [
    {
      "description": "Isolate all refactoring changes in a new, dedicated Git branch to ensure the main branch remains untouched and stable.",
      "status": "done",
      "id": 1,
      "dependencies": [],
      "details": "Execute `git checkout -b feature/ts-to-js-refactor` to create and switch to the new branch.",
      "title": "Create Dedicated Git Branch for Refactoring",
      "testStrategy": "Verify that a new branch named `feature/ts-to-js-refactor` has been created and that the current working branch is set to it using `git branch` and `git status`.",
      "priority": "high",
      "subtasks": []
    },
    {
      "details": "Use `find . -name \"*.ts\"` to confirm `orchestrator/src/index.ts`. Review the content of `tsconfig.json`, `orchestrator/wrangler.toml`, `package.json`, `jest.config.mjs`, and `.github/workflows/cf-deploy.yml`.",
      "id": 2,
      "testStrategy": "Document the paths and initial content of all identified files. Ensure `orchestrator/src/index.ts` is confirmed as the primary file to be converted.",
      "description": "Confirm the presence and content of all `.ts` files and relevant configuration files to understand their current TypeScript dependencies.",
      "title": "Identify TypeScript and Configuration Files",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "priority": "high",
      "status": "done",
      "id": 3,
      "dependencies": [
        2
      ],
      "title": "Rename orchestrator/src/index.ts to .mjs",
      "details": "Execute `git mv orchestrator/src/index.ts orchestrator/src/index.mjs` to rename the file while preserving its Git history.",
      "description": "Rename the primary orchestrator worker entry point from `orchestrator/src/index.ts` to `orchestrator/src/index.mjs`.",
      "testStrategy": "Verify that `orchestrator/src/index.ts` no longer exists and `orchestrator/src/index.mjs` is present in its place. Confirm the file content remains intact.",
      "subtasks": []
    },
    {
      "dependencies": [
        3
      ],
      "priority": "high",
      "status": "done",
      "details": "Open `orchestrator/src/index.mjs`. Manually or using a text editor's find/replace with regex, remove all TypeScript-specific type annotations. For example, change `function foo(param: string): number {` to `function foo(param) {`.",
      "id": 4,
      "description": "Systematically remove all explicit type annotations (e.g., `: string`, `: MyInterface<T>`) from function parameters, return types, and variable declarations within `orchestrator/src/index.mjs`.",
      "title": "Refactor orchestrator/src/index.mjs - Remove Type Annotations",
      "testStrategy": "Perform a thorough code review of `orchestrator/src/index.mjs` to ensure no explicit type annotations remain. Verify that the code remains syntactically valid JavaScript.",
      "subtasks": []
    },
    {
      "dependencies": [
        4
      ],
      "status": "done",
      "description": "Convert `interface` and `type` declarations in `orchestrator/src/index.mjs` to JSDoc `@typedef` comments for documentation purposes, or replace with runtime checks if their definitions were used for critical runtime validation.",
      "priority": "high",
      "id": 5,
      "title": "Refactor orchestrator/src/index.mjs - Convert Interfaces and Types",
      "details": "For interfaces defining object shapes, convert them to JSDoc `@typedef` comments. Example: `interface MyType { prop: string; }` becomes `/** @typedef {{prop: string}} MyType */`. If runtime validation was dependent on these, implement a suitable JavaScript validation library (e.g., Joi) or manual checks.",
      "testStrategy": "Code review `orchestrator/src/index.mjs` to ensure all `interface` and `type` declarations are removed and replaced with appropriate JSDoc or runtime checks. Verify that the intended structural documentation or validation is preserved.",
      "subtasks": []
    },
    {
      "status": "done",
      "id": 6,
      "details": "Example: `enum Status { Active, Inactive }` should be converted to `const Status = { Active: 'Active', Inactive: 'Inactive' };` or `const Status = Object.freeze({ Active: 'Active', Inactive: 'Inactive' });` for immutability.",
      "priority": "high",
      "dependencies": [
        5
      ],
      "title": "Refactor orchestrator/src/index.mjs - Convert Enums",
      "testStrategy": "Code review `orchestrator/src/index.mjs` to confirm all `enum` declarations are replaced by plain JavaScript objects. Verify that references to enum members (e.g., `Status.Active`) are correctly updated and function as expected.",
      "description": "Convert TypeScript `enum` declarations in `orchestrator/src/index.mjs` to plain JavaScript objects with `const` declarations, maintaining their functional equivalent.",
      "subtasks": []
    },
    {
      "title": "Update Import/Export Paths to .mjs Extensions",
      "id": 7,
      "priority": "high",
      "description": "Perform a project-wide search and replace to change `.ts` extensions to `.mjs` in all `import` and `export` statements referencing local files.",
      "details": "This will affect imports within `orchestrator/src/index.mjs` and any other `.mjs` files that previously imported from `orchestrator/src/index.ts` or other local `.ts` files. Ensure all local file references explicitly use the `.mjs` extension (e.g., `import { func } from './module.mjs';`).",
      "status": "done",
      "testStrategy": "Globally search the codebase for `.ts` extensions in `import` and `export` statements and verify they have been updated to `.mjs`. Confirm that all module resolutions are correct and no import errors occur.",
      "dependencies": [
        6
      ],
      "subtasks": []
    },
    {
      "description": "Remove all `import type { ... } from '...';` statements from the entire codebase, as they are TypeScript-specific and no longer needed.",
      "dependencies": [
        7
      ],
      "priority": "high",
      "details": "Perform a project-wide search and remove all instances of `import type` statements.",
      "testStrategy": "Code review the entire project to ensure no `import type` statements remain. Verify that the removal does not introduce any runtime errors.",
      "status": "done",
      "id": 8,
      "title": "Remove import type Statements",
      "subtasks": []
    },
    {
      "description": "Modify `orchestrator/wrangler.toml` to update the `main` entry point from pointing to a `.ts` file to `orchestrator/src/index.mjs`.",
      "priority": "high",
      "id": 9,
      "title": "Update wrangler.toml Entry Point",
      "details": "Open `orchestrator/wrangler.toml` and change the `main` field from `main = \"src/index.ts\"` to `main = \"src/index.mjs\"`.",
      "testStrategy": "Verify the `main` entry in `orchestrator/wrangler.toml` correctly points to `src/index.mjs`. Attempt to run `wrangler dev` to ensure the worker can be loaded.",
      "dependencies": [
        8
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "status": "done",
      "testStrategy": "Verify that `typescript` is no longer listed in `devDependencies` and that no `scripts` directly call `tsc` or other TypeScript tools. Run `npm install` to ensure dependencies are correctly updated.",
      "dependencies": [
        9
      ],
      "title": "Update package.json - Remove TypeScript Dependencies and Scripts",
      "id": 10,
      "priority": "high",
      "description": "Review `package.json` to remove `typescript` from `devDependencies` and update or remove any `scripts` that specifically invoke `tsc` or other TypeScript-related tools.",
      "details": "In `package.json`, locate the `devDependencies` section and remove the `typescript` entry. Review the `scripts` section and remove or modify entries like `\"build\": \"tsc\"` or `\"lint\": \"eslint . --ext .ts\"`.",
      "subtasks": []
    },
    {
      "id": 11,
      "details": "Add or confirm the presence of `\"type\": \"module\"` as a top-level key-value pair in `package.json`.",
      "title": "Update package.json - Set \"type\": \"module\"",
      "testStrategy": "Verify that `package.json` contains `\"type\": \"module\"`. Attempt to run a simple ES module script to confirm module resolution behavior.",
      "description": "Ensure `\"type\": \"module\"` is explicitly set at the top level of `package.json` to ensure all JavaScript files are treated as ES Modules.",
      "dependencies": [
        10
      ],
      "priority": "high",
      "status": "done",
      "subtasks": []
    },
    {
      "details": "Execute `rm tsconfig.json` from the project root directory.",
      "description": "Delete the `tsconfig.json` file from the project root, as TypeScript will no longer be used.",
      "priority": "high",
      "title": "Remove tsconfig.json",
      "id": 12,
      "status": "done",
      "testStrategy": "Verify that `tsconfig.json` is no longer present in the project directory.",
      "dependencies": [
        11
      ],
      "subtasks": []
    },
    {
      "title": "Update jest.config.mjs for JavaScript Compatibility",
      "id": 13,
      "details": "Open `jest.config.mjs`. If it includes `preset: 'ts-jest'` or similar TypeScript-specific configurations, replace it with a standard JavaScript configuration or remove the preset entirely if not needed.",
      "priority": "high",
      "description": "Review and update `jest.config.mjs` to remove any TypeScript-specific transformers or presets (e.g., `ts-jest`) to ensure compatibility with pure JavaScript testing.",
      "status": "done",
      "dependencies": [
        12
      ],
      "testStrategy": "Review `jest.config.mjs` to confirm removal of TypeScript presets. Attempt to run Jest tests (`npm test`) to ensure the test runner functions correctly with pure JavaScript files.",
      "subtasks": []
    },
    {
      "details": "Edit `.github/workflows/cf-deploy.yml`. Remove steps that explicitly call `tsc` or `npm run build` if that script involves TypeScript compilation. The deployment process should now directly utilize the `.mjs` files.",
      "description": "Review and modify the GitHub Actions workflow for deployment (`.github/workflows/cf-deploy.yml`) to remove any build steps that involve TypeScript compilation.",
      "dependencies": [
        13
      ],
      "title": "Update GitHub Actions Workflow (cf-deploy.yml)",
      "status": "done",
      "id": 14,
      "testStrategy": "Review the `.github/workflows/cf-deploy.yml` file to confirm that all TypeScript compilation steps have been removed. Ensure the workflow is configured to deploy `.mjs` files directly.",
      "priority": "high",
      "subtasks": []
    },
    {
      "details": "Execute `flatpak-spawn --host wrangler dev` for both the orchestrator and any backend workers. Use tools like `curl` or a browser to manually hit all critical API endpoints and verify their responses.",
      "dependencies": [
        14
      ],
      "testStrategy": "Document the successful responses and expected behavior for each critical API endpoint tested locally. Ensure no errors are reported by `wrangler dev`.",
      "title": "Local Development Server Verification",
      "status": "done",
      "priority": "high",
      "id": 15,
      "description": "Start both the orchestrator and backend Cloudflare Workers locally and manually test all critical API endpoints exposed by both workers to ensure they function as expected and return correct responses.",
      "subtasks": []
    },
    {
      "description": "Execute the existing unit test suite using `flatpak-spawn --host npm test` and verify that all tests pass without errors or failures. Update any tests that relied on TypeScript-specific constructs or import paths.",
      "priority": "high",
      "title": "Execute Unit Test Suite",
      "dependencies": [
        15
      ],
      "id": 16,
      "details": "Run `flatpak-spawn --host npm test`. Address any failing tests by updating them to reflect the `.mjs` changes and pure JavaScript syntax.",
      "testStrategy": "All unit tests must pass successfully. Review test reports for any failures or unexpected behavior. Ensure test coverage is maintained.",
      "status": "done",
      "subtasks": []
    },
    {
      "dependencies": [
        16
      ],
      "id": 17,
      "details": "Run the project's integration test suite. This might involve specific commands depending on the integration testing framework used.",
      "status": "done",
      "testStrategy": "All integration tests must pass successfully. Verify that the interactions between workers are correct and data flows as expected.",
      "title": "Execute Integration Tests (If Applicable)",
      "description": "If the project includes integration tests that verify interactions between the orchestrator and backend workers, execute these tests to confirm end-to-end functionality.",
      "priority": "medium",
      "subtasks": []
    },
    {
      "id": 18,
      "title": "Deploy to Staging Environment",
      "description": "Deploy the refactored workers to a non-production staging environment. The main worker has been successfully deployed, but the orchestrator worker deployment failed due to a service binding resolution error ('Could not resolve service binding 'BACKEND_SERVICE'. Target script 'zen-ai-router-worker' not found.').",
      "status": "deferred",
      "dependencies": [
        17
      ],
      "priority": "high",
      "details": "Initial deployment attempt resulted in the successful deployment of the main worker. However, the orchestrator worker deployment failed with the error: 'Could not resolve service binding 'BACKEND_SERVICE'. Target script 'zen-ai-router-worker' not found.' This suggests a potential timing issue where the main worker (zen-ai-router-worker) was not fully propagated or available before the orchestrator's deployment attempt. A retry of the orchestrator worker deployment is necessary after allowing sufficient propagation time for the main worker.",
      "testStrategy": "Verify that the main worker is accessible at its staging URL. Confirm that the retried orchestrator worker deployment completes successfully without errors. After successful deployment, verify that the orchestrator worker is accessible and correctly routing requests to the main worker.",
      "subtasks": [
        {
          "id": 1,
          "description": "Deploy main worker to staging environment",
          "status": "done"
        },
        {
          "id": 2,
          "description": "Attempt orchestrator worker deployment to staging environment",
          "status": "failed",
          "notes": "Failed with error: 'Could not resolve service binding 'BACKEND_SERVICE'. Target script 'zen-ai-router-worker' not found.'"
        },
        {
          "id": 3,
          "description": "Investigate orchestrator deployment failure and identify root cause (timing issue suspected)",
          "status": "done"
        },
        {
          "id": 4,
          "description": "Retry orchestrator worker deployment to staging environment",
          "status": "todo"
        },
        {
          "id": 5,
          "description": "Verify orchestrator worker accessibility and functionality after retry",
          "status": "todo"
        }
      ]
    },
    {
      "description": "Conduct a final round of comprehensive functional testing in the deployed staging environment to confirm stability and correctness in a production-like setting.",
      "testStrategy": "All critical functionalities must work as expected in the staging environment. Document any discrepancies or issues found and ensure they are resolved before production deployment consideration.",
      "dependencies": [
        18
      ],
      "details": "Perform a full suite of functional tests on the deployed workers in the staging environment, covering all critical user flows and API interactions.",
      "priority": "high",
      "id": 19,
      "status": "pending",
      "title": "Functional Testing in Staging Environment",
      "subtasks": []
    }
  ]
}
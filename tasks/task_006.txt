# Task ID: 6
# Title: Execute Google Generative AI API Call and Extract Audio Data
# Status: pending
# Dependencies: 2, 5
# Priority: high
# Description: Use `fetch` to call the Google Generative AI API with the constructed request body. Extract the base64 encoded audio data and `mimeType` from Google's successful response.
# Details:
1. Formulate the full Google API endpoint URL: `https://generativelanguage.googleapis.com/v1beta/models/{MODEL_NAME}:generateContent?key={API_KEY}`.
2. Use `fetch` with `POST` method, `Content-Type: application/json` header, and the JSON request body.
3. Handle potential network errors or non-200 responses from Google API.
4. Parse the JSON response from Google.
5. Navigate the response structure (`candidates[0].content.parts[0].inlineData`) to extract `data` (base64 audio) and `mimeType`.
6. Parse `sampleRate` from the `mimeType` string (e.g., "audio/L16;rate=24000" -> 24000). Default to 24000 if parsing fails or `mimeType` is unexpected.

# Test Strategy:
1. Make a request to the worker with valid inputs. Verify that the `fetch` call to Google API is made.
2. Log the raw Google API response and verify that the audio data and mimeType are correctly extracted.
3. Test with a `mimeType` that has a different `rate` to ensure parsing works.
4. Test error responses from Google (e.g., by temporarily using an invalid model name) and ensure they are caught and handled by the worker's `errorHandler`.

# Subtasks:
## 1. Formulate Full Endpoint URL [pending]
### Dependencies: None
### Description: Construct the complete URL for the Google Generative AI API call, including base URL, endpoint path, and any necessary query parameters (e.g., API key).
### Details:
Assemble the API endpoint URL, ensuring correct protocol, domain, path, and query string for the specific Generative AI service.

## 2. Perform Fetch Request [pending]
### Dependencies: 6.1
### Description: Execute the `fetch` API call using the formulated URL and the prepared request body (e.g., JSON payload for audio generation parameters).
### Details:
Initiate the network request to the Google Generative AI API, sending the required input data in the request body.

## 3. Handle Network and Non-200 API Responses [pending]
### Dependencies: 6.2
### Description: Implement error handling for network failures (e.g., connection issues) and non-200 HTTP status codes returned by the API (e.g., 4xx, 5xx errors).
### Details:
Check the `Response.ok` property and catch potential `fetch` errors to manage unsuccessful API interactions gracefully.

## 4. Parse Successful JSON Response [pending]
### Dependencies: 6.3
### Description: Parse the incoming response body as JSON, assuming a successful (200-level) HTTP status code.
### Details:
Convert the raw response stream into a JavaScript object using `response.json()` after confirming a successful API call.

## 5. Extract Base64 Audio Data and MimeType [pending]
### Dependencies: 6.4
### Description: Navigate the parsed JSON object to locate and extract the base64 encoded audio data and its corresponding `mimeType` string.
### Details:
Access specific properties within the JSON response structure to retrieve the generated audio content and its format information.

## 6. Parse Sample Rate from MimeType [pending]
### Dependencies: 6.5
### Description: Extract the audio `sampleRate` value from the `mimeType` string (e.g., 'audio/wav; codecs=pcm; rate=44100').
### Details:
Use string manipulation or regular expressions to parse the `mimeType` string and isolate the numerical sample rate value.


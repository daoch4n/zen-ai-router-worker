# Task ID: 4
# Title: Develop WAV Audio Utility Functions
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Implement `generateWavHeader(dataLength, sampleRate, channels, bitsPerSample)` and `decodeBase64Audio(base64String)` in a new `src/utils/audio.mjs` file. Prioritize performance for `generateWavHeader` using `DataView`.
# Details:
1. Create `src/utils/audio.mjs`.
2. `decodeBase64Audio`: Takes a base64 string, decodes it to a `Uint8Array`. Use `atob` and `Uint8Array.from` or `TextDecoder` if suitable for binary data.
3. `generateWavHeader`:
    *   Input: `dataLength` (size of PCM data), `sampleRate`, `channels`, `bitsPerSample`.
    *   Output: `Uint8Array` representing the 44-byte WAV header.
    *   Use `ArrayBuffer` and `DataView` for efficient byte manipulation.
    *   Implement the RIFF, WAVE, fmt, and data chunks.
    *   Ensure correct byte order (little-endian for most fields).
    *   Calculate `ByteRate`, `BlockAlign`, `Subchunk2Size`.

# Test Strategy:
1. Unit test `decodeBase64Audio` with known base64 strings and verify the resulting `Uint8Array`.
2. Unit test `generateWavHeader` with various valid parameters (e.g., `dataLength=10000`, `sampleRate=24000`, `channels=1`, `bitsPerSample=16`) and verify the output `Uint8Array` matches a known correct WAV header byte sequence.

# Subtasks:
## 1. Create `src/utils/audio.mjs` Module [pending]
### Dependencies: None
### Description: Set up the main module file for audio utilities, `src/utils/audio.mjs`, to house the WAV-related functions.
### Details:
Create the file `src/utils/audio.mjs` and add a basic module export structure for future functions.

## 2. Implement `decodeBase64Audio` Function [pending]
### Dependencies: 4.1
### Description: Develop the utility function to decode a Base64 encoded audio string into an ArrayBuffer or Uint8Array.
### Details:
Implement `decodeBase64Audio(base64String)` to convert a Base64 string into its raw binary representation suitable for audio processing.

## 3. Implement `generateWavHeader` Function (Byte-Level Construction) [pending]
### Dependencies: 4.1
### Description: Develop the core function to construct a WAV file header byte-by-byte, adhering to the RIFF/WAV specification.
### Details:
Implement `generateWavHeader(sampleRate, numChannels, bitDepth, dataLength)` using `DataView` to precisely write the RIFF chunk, WAVE format, fmt chunk, and data chunk header. Ensure correct byte ordering (little-endian) and accurate size calculations for all fields.

## 4. Develop Unit Tests for `decodeBase64Audio` [pending]
### Dependencies: 4.2
### Description: Create comprehensive unit tests to verify the correct functionality and edge cases of the `decodeBase64Audio` function.
### Details:
Write test cases covering valid Base64 audio strings, empty strings, and potentially malformed inputs to ensure `decodeBase64Audio` behaves as expected.

## 5. Develop Unit Tests for `generateWavHeader` [pending]
### Dependencies: 4.3
### Description: Create comprehensive unit tests to verify the precise byte-level construction of the WAV header generated by `generateWavHeader`.
### Details:
Write test cases to validate the output of `generateWavHeader` against known WAV header structures for various parameters (sample rate, channels, bit depth, data length). Verify the integrity of RIFF, WAVE, fmt, and data chunk fields byte-by-byte.


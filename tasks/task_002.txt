# Task ID: 2
# Title: Implement ConversationStateDO Core Logic
# Status: done
# Dependencies: 1
# Priority: high
# Description: Implement the core functionality of the `ConversationStateDO` including endpoints for storing, retrieving, and deleting tool mappings, and a method for full state cleanup.
# Details:
1. Create `src/ConversationStateDO.js` (or similar) and define the `ConversationStateDO` class extending `DurableObject`. 
2. Implement the constructor to initialize `this.state.storage`.
3. Implement `handleRequest(request)` to route requests to specific methods based on URL path (e.g., `/store`, `/retrieve`, `/delete_mapping`, `/clear_conversation_state`).
4. `/store` (FR1.2): Accept `tool_use_id` and `tool_name`. Use `this.state.storage.put(tool_use_id, tool_name)` (FR1.6).
5. `/retrieve` (FR1.3): Accept `tool_use_id`. Use `this.state.storage.get(tool_use_id)`.
6. `/delete_mapping` (FR1.4): Accept `tool_use_id`. Use `this.state.storage.delete(tool_use_id)`.
7. `/clear_conversation_state` (FR1.5): Implement a method that calls `this.state.storage.deleteAll()` and `this.state.storage.deleteAlarm()`.

# Test Strategy:
Write unit tests for `ConversationStateDO` methods. Test `/store` and then `/retrieve` to ensure data persistence and retrieval. Test `/delete_mapping` to confirm specific key removal. Test `/clear_conversation_state` to verify all data and alarms are removed. Use `miniflare` for local testing.

# Subtasks:
## 1. Initialize ConversationStateDO and Basic Request Handling [done]
### Dependencies: None
### Description: Create the `ConversationStateDO` class, define its constructor to accept `state` and `env`, and set up the initial `handleRequest` method to parse incoming request URLs and methods.
### Details:
Define `ConversationStateDO` class with `state` and `env` in constructor. Implement `handleRequest` to extract `URL` path and `method` for routing.
<info added on 2025-05-25T11:36:33.019Z>
Plan for subtask 2.1:
1. Read the current content of `src/durableObject.mjs`.
2. Add the basic class structure for `ConversationStateDO` extending `DurableObject`.
3. Implement the constructor to initialize `this.state.storage`.
4. Implement a basic `handleRequest` method that parses the URL path and HTTP method.
5. Write the initial code to handle unknown routes with a 404 response.
</info added on 2025-05-25T11:36:33.019Z>

## 2. Implement `/store` Endpoint Logic [done]
### Dependencies: 2.1
### Description: Develop the internal logic for the `/store` endpoint, responsible for persisting key-value pairs (e.g., conversation state segments) using `state.storage.put()`. This logic should handle parsing the request body.
### Details:
Logic should handle `PUT` or `POST` requests. Parse request body for `key` and `value`. Use `state.storage.put(key, value)`. Return appropriate success/error response.
<info added on 2025-05-25T11:36:54.411Z>
Implement the `/store` endpoint logic. This involves:
1. Adding a new method `handleStore(request)` to the `ConversationStateDO` class.
2. Inside `handleStore`, parsing the request body to extract `tool_use_id` and `tool_name`.
3. Using `this.storage.put(tool_use_id, tool_name)` to store the data.
4. Returning an appropriate `Response` indicating success or failure.
5. Updating the `handleRequest` method to route `/store` requests to `handleStore`.
</info added on 2025-05-25T11:36:54.411Z>

## 3. Implement `/retrieve` Endpoint Logic [done]
### Dependencies: 2.1
### Description: Develop the internal logic for the `/retrieve` endpoint, responsible for fetching a specific value associated with a given key using `state.storage.get()`. This logic should handle parsing URL query parameters.
### Details:
Logic should handle `GET` requests. Parse URL query parameters for the `key`. Use `state.storage.get(key)`. Return the retrieved value or a 404 if not found.
<info added on 2025-05-25T11:37:15.647Z>
1. Add a new method `handleRetrieve(request)` to the `ConversationStateDO` class.
2. Inside `handleRetrieve`, parse the URL query parameters to extract `tool_use_id`.
3. Use `this.storage.get(tool_use_id)` to retrieve the data.
4. Return an appropriate `Response` with the retrieved data (or null if not found) or an error.
5. Update the `handleRequest` method to route `/retrieve` requests to `handleRetrieve`.
</info added on 2025-05-25T11:37:15.647Z>

## 4. Implement `/delete_mapping` Endpoint Logic [done]
### Dependencies: 2.1
### Description: Develop the internal logic for the `/delete_mapping` endpoint, responsible for removing a specific key-value pair using `state.storage.delete()`. This logic should handle parsing URL query parameters.
### Details:
Logic should handle `DELETE` requests. Parse URL query parameters for the `key` to be deleted. Use `state.storage.delete(key)`. Return success/error response.
<info added on 2025-05-25T11:37:37.014Z>
Implement a `handleDeleteMapping(request)` method within the `ConversationStateDO` class. This method should parse the URL query parameters to extract the `tool_use_id` and then use `this.storage.delete(tool_use_id)` to remove the corresponding data. The method must return an appropriate `Response` indicating success or failure. Finally, update the `handleRequest` method to route incoming `/delete_mapping` requests to the new `handleDeleteMapping` method.
</info added on 2025-05-25T11:37:37.014Z>

## 5. Implement `/clear_conversation_state` Endpoint Logic [done]
### Dependencies: 2.1
### Description: Develop the internal logic for the `/clear_conversation_state` endpoint, responsible for clearing all stored data for the current Durable Object instance using `state.storage.deleteAll()`.
### Details:
Logic should handle `DELETE` or `POST` requests. Call `state.storage.deleteAll()`. Return success response.
<info added on 2025-05-25T11:38:09.227Z>
Implement a new method `handleClearConversationState(request)` within the `ConversationStateDO` class. This method should call `this.storage.deleteAll()` and `this.storage.deleteAlarm()` to clear all stored state and alarms. It must return an appropriate `Response` indicating success or failure. Finally, update the `handleRequest` method to route `/clear_conversation_state` requests to `handleClearConversationState`.
</info added on 2025-05-25T11:38:09.227Z>

## 6. Integrate Endpoint Logic into `handleRequest` Routing [done]
### Dependencies: 2.2, 2.3, 2.4, 2.5
### Description: Modify the `handleRequest` method to correctly route incoming requests to the respective `/store`, `/retrieve`, `/delete_mapping`, and `/clear_conversation_state` logic based on the URL path and HTTP method.
### Details:
Use `if/else if` or `switch` statements based on `request.url.pathname` and `request.method` to call the appropriate internal handler functions for each endpoint. Handle unknown paths/methods with a 404/405 response.

## 7. Set up Miniflare for Local Testing and Basic Tests [done]
### Dependencies: 2.6
### Description: Configure `miniflare` to run the `ConversationStateDO` locally and write basic integration tests to verify the functionality of all implemented endpoints (`/store`, `/retrieve`, `/delete_mapping`, `/clear_conversation_state`).
### Details:
Set up `miniflare` environment. Write test cases using `fetch` to interact with the DO, asserting expected responses for storing, retrieving, deleting specific keys, and clearing all state.
<info added on 2025-05-25T11:38:36.512Z>
Inspect `package.json` to see if `miniflare` is already a dependency or if there's a test setup. If `miniflare` is not present, add it to `devDependencies` in `package.json`. Create a new test file, e.g., `test/durableObject.test.mjs`, and add basic integration tests for `/store`, `/retrieve`, `/delete_mapping`, and `/clear_conversation_state` endpoints using `Miniflare`. Update `jest.config.mjs` if necessary to include the new test file.
</info added on 2025-05-25T11:38:36.512Z>


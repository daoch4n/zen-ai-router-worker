# Task ID: 7
# Title: Assemble WAV File and Return Binary Audio Response
# Status: pending
# Dependencies: 4, 6
# Priority: high
# Description: Decode the base64 audio data using `decodeBase64Audio`, generate the WAV header using `generateWavHeader` (using parsed/default `sampleRate`, 1 channel, 16 bits per sample), concatenate them, and send the combined binary data as the worker's response with `Content-Type: audio/wav`.
# Details:
1. Call `decodeBase64Audio` with the extracted base64 audio string to get a `Uint8Array` of PCM data.
2. Determine `dataLength` from the decoded PCM data.
3. Call `generateWavHeader` with `dataLength`, the parsed `sampleRate` (or default 24000), `channels=1`, `bitsPerSample=16`.
4. Concatenate the WAV header `Uint8Array` and the PCM audio `Uint8Array` into a single `Uint8Array` or `ArrayBuffer`.
5. Create a `Response` object with the combined binary data, `status: 200`, and `Content-Type: audio/wav`.

# Test Strategy:
1. Make a successful request to the worker.
2. Save the response body as a `.wav` file.
3. Play the `.wav` file to confirm audio playback.
4. Use a WAV file analyzer tool (e.g., `ffprobe` or online tools) to verify the WAV header structure (sample rate, channels, bit depth, data length) matches expectations.

# Subtasks:
## 1. Decode Base64 Audio Data [pending]
### Dependencies: None
### Description: Decode the base64 encoded audio string into a `Uint8Array` representing the raw PCM audio data using the `decodeBase64Audio` utility function.
### Details:
This step converts the text-based base64 representation into binary audio data, which is the foundation for the WAV file.

## 2. Calculate PCM Data Length [pending]
### Dependencies: 7.1
### Description: Determine the byte length of the decoded PCM audio data obtained from the previous step. This `dataLength` value is essential for generating an accurate WAV header.
### Details:
The `dataLength` will be used to specify the size of the audio data chunk within the WAV header.

## 3. Generate WAV Header [pending]
### Dependencies: 7.2
### Description: Create the WAV file header as a `Uint8Array` using the `generateWavHeader` function, incorporating the calculated PCM data length and other necessary audio parameters (e.g., sample rate, channels, bit depth).
### Details:
The WAV header provides crucial metadata about the audio stream, enabling players to correctly interpret the PCM data.

## 4. Concatenate Header and PCM Data [pending]
### Dependencies: 7.1, 7.3
### Description: Combine the generated WAV header `Uint8Array` and the decoded PCM audio data `Uint8Array` into a single, contiguous `Uint8Array` representing the complete WAV file binary content.
### Details:
This step physically joins the header and the audio data, forming the complete binary structure of the WAV file.

## 5. Construct Final WAV Response [pending]
### Dependencies: 7.4
### Description: Create a `Response` object with the concatenated WAV file binary data as its body and set the `Content-Type` header to `audio/wav` to ensure proper browser interpretation and playback.
### Details:
This finalizes the HTTP response, making the assembled WAV file available to the client.


name: Deploy Cloudflare Workers

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [closed]
jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'repository_dispatch'
    permissions:
      contents: read
      id-token: write # Required for OIDC token to deploy to GitHub Pages
      pages: write # Required to deploy to GitHub Pages
    steps:
      - uses: actions/checkout@v4
      - name: Install Wrangler
        run: npm install -g wrangler
      - name: Prepare API Key Data
        id: prep_api_data
        env:
          ALL_API_KEYS_JSON_SECRET: ${{ secrets.ALL_API_KEYS_JSON }}
        run: |
          echo "Attempting to parse ALL_API_KEYS_JSON_SECRET..."
          API_KEYS_NEWLINE_SEPARATED=$(jq -e -r '.[]' <<< "$ALL_API_KEYS_JSON_SECRET")
          JQ_EXIT_CODE=$?
          if [ $JQ_EXIT_CODE -ne 0 ]; then
            echo "Error: jq failed to parse ALL_API_KEYS_JSON_SECRET. JQ Exit Code: $JQ_EXIT_CODE" >&2
            echo "Please validate the JSON structure of the ALL_API_KEYS_JSON_SECRET secret. The secret content will not be displayed." >&2
            exit 1
          fi
          mapfile -t API_KEYS_ARRAY <<< "$API_KEYS_NEWLINE_SEPARATED"
          local_api_keys_count=${#API_KEYS_ARRAY[@]}
          echo "Successfully parsed ${local_api_keys_count} keys."
          echo "all_api_keys_count=${local_api_keys_count}" >> $GITHUB_OUTPUT
          if [ "${local_api_keys_count}" -gt 0 ]; then
            API_KEYS_AS_JSON_ARRAY_STRING=$(printf "%s\n" "${API_KEYS_ARRAY[@]}" | jq -R . | jq -s .)
          else
            API_KEYS_AS_JSON_ARRAY_STRING="[]"
          fi
          echo "api_keys_as_json_array_string<<EOF_KEYS_JSON" >> $GITHUB_OUTPUT
          echo "${API_KEYS_AS_JSON_ARRAY_STRING}" >> $GITHUB_OUTPUT
          echo "EOF_KEYS_JSON" >> $GITHUB_OUTPUT

      - name: Ensure wrangler.toml for src Workers (Production)
        run: |
          cp wrangler.toml.example wrangler.toml
          echo "Copied wrangler.toml.example to wrangler.toml:"
          cat wrangler.toml

      - name: Deploy Dynamic src Workers (Production)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PASS: ${{ secrets.PASS }}
          API_KEYS_JSON_FROM_OUTPUT: ${{ steps.prep_api_data.outputs.api_keys_as_json_array_string }}
        run: |
          TOTAL_KEYS=${{ steps.prep_api_data.outputs.all_api_keys_count }}
          API_KEYS_JSON_STRING="$API_KEYS_JSON_FROM_OUTPUT"
          if [ -z "$API_KEYS_JSON_STRING" ]; then
            echo "Error: API_KEYS_JSON_FROM_OUTPUT was empty!" >&2
            exit 1
          fi
          if ! mapfile -t API_KEYS_ARRAY < <(jq -r '.[]' <<< "$API_KEYS_JSON_STRING"); then
            echo "Error: Could not re-parse api_keys_as_json_array_string from previous step." >&2
            echo "The string content will not be displayed." >&2
            exit 1
          fi
          if [ "${#API_KEYS_ARRAY[@]}" -ne "${TOTAL_KEYS}" ]; then
            echo "Warning: Key count mismatch after re-parsing. Expected ${TOTAL_KEYS}, got ${#API_KEYS_ARRAY[@]}." >&2
          fi
          echo "Successfully rehydrated ${#API_KEYS_ARRAY[@]} API keys for deployment."
          KEYS_PER_WORKER=8
          NUM_WORKERS=$(( (TOTAL_KEYS + KEYS_PER_WORKER - 1) / KEYS_PER_WORKER ))
          ESCAPED_PASS=$(printf "%q" "${PASS}")
          echo "::add-mask::${ESCAPED_PASS}"
          for i in $(seq 0 $((NUM_WORKERS - 1))); do
            WORKER_NAME="zen-ai-router-worker-${i}"
            START_INDEX=$((i * KEYS_PER_WORKER))
            END_INDEX=$((START_INDEX + KEYS_PER_WORKER - 1))
            WORKER_VARS="--var PASS:${ESCAPED_PASS}"
            CURRENT_WORKER_END_INDEX=$((END_INDEX < TOTAL_KEYS ? END_INDEX : TOTAL_KEYS - 1))
            for ((j=START_INDEX; j<=CURRENT_WORKER_END_INDEX; j++)); do
              if [ "${j}" -lt "${#API_KEYS_ARRAY[@]}" ] && [ -n "${API_KEYS_ARRAY[j]}" ]; then
                KEY_INDEX=$((j - START_INDEX + 1))
                ESCAPED_API_KEY=$(printf "%q" "${API_KEYS_ARRAY[j]}")
                echo "::add-mask::${ESCAPED_API_KEY}"
                WORKER_VARS="${WORKER_VARS} --var KEY${KEY_INDEX}:${ESCAPED_API_KEY}"
              fi
            done
            # The wrangler deploy command will implicitly use wrangler.toml from the root
            # if --config is not specified.
            wrangler deploy "src/worker.mjs" \
              --name "${WORKER_NAME}" \
              --compatibility-date "2024-05-01" \
              --compatibility-flags nodejs_compat \
              ${WORKER_VARS}
          done

      - name: Generate Orchestrator Config (with DO Migration)
        id: generate_orchestrator_config_with_migration # Step ID
        run: |
          echo "Generating orchestrator/wrangler.toml WITH RouterCounter migration..."
          TOTAL_KEYS=${{ steps.prep_api_data.outputs.all_api_keys_count }}
          KEYS_PER_WORKER=8
          NUM_WORKERS=$(( (TOTAL_KEYS + KEYS_PER_WORKER - 1) / KEYS_PER_WORKER ))
          CONFIG_CONTENT="name = \"zen-ai-router-orchestrator\"\n"
          CONFIG_CONTENT+="main = \"src/index.mjs\"\n"
          CONFIG_CONTENT+="compatibility_date = \"2024-05-01\"\n\n"
          CONFIG_CONTENT+="[placement]\nmode = \"smart\"\n\n"
          CONFIG_CONTENT+="[[durable_objects.bindings]]\n"
          CONFIG_CONTENT+="name = \"ROUTER_COUNTER\"\n"
          CONFIG_CONTENT+="class_name = \"RouterCounter\"\n\n"
          # This migration is for initial setup. It might fail if DO already exists.
          CONFIG_CONTENT+="[[migrations]]\n"
          CONFIG_CONTENT+="tag = \"v1-router-counter-initial-sqlite-setup\"\n"
          CONFIG_CONTENT+="new_sqlite_classes = [\"RouterCounter\"]\n\n"

          for i in $(seq 0 $((NUM_WORKERS - 1))); do
            CONFIG_CONTENT+="[[services]]\n"
            CONFIG_CONTENT+="binding = \"BACKEND_SERVICE_${i}\"\n"
            CONFIG_CONTENT+="service = \"zen-ai-router-worker-${i}\"\n\n"
          done
          echo -e "$CONFIG_CONTENT" > orchestrator/wrangler.toml
          echo "Generated orchestrator/wrangler.toml (with migration):"
          cat orchestrator/wrangler.toml

      - name: Attempt 1 of Deploy Orchestrator Worker (with DO Migration)
        id: deploy_orchestrator_attempt_1 # Step ID
        continue-on-error: true # Important: Allow workflow to continue if this fails
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PASS: ${{ secrets.PASS }}
        run: |
          echo "Attempting to deploy orchestrator worker with DO migration..."
          DEPLOY_OUTPUT=$(wrangler deploy --config orchestrator/wrangler.toml --var PASS:"${{ secrets.PASS }}" 2>&1)
          echo "$DEPLOY_OUTPUT"
          # Extract the URL from the output
          WORKER_URL=$(echo "$DEPLOY_OUTPUT" | grep -oP 'https://\S+\.workers\.dev' | head -n 1)
          if [ -n "$WORKER_URL" ]; then
            echo "ORCHESTRATOR_WORKER_URL=${WORKER_URL}" >> $GITHUB_OUTPUT
            echo "Successfully deployed orchestrator worker (Attempt 1). URL: $WORKER_URL"
          else
            echo "Warning: Could not extract worker URL from deployment output (Attempt 1)." >&2
          fi

      - name: Generate Orchestrator Config (NO DO Migration for RouterCounter)
        id: generate_orchestrator_config_no_migration # Step ID
        if: steps.deploy_orchestrator_attempt_1.outcome == 'failure' # Only run if first attempt failed
        run: |
          echo "First orchestrator deployment failed. Generating orchestrator/wrangler.toml WITHOUT RouterCounter new_sqlite_classes migration..."
          TOTAL_KEYS=${{ steps.prep_api_data.outputs.all_api_keys_count }}
          KEYS_PER_WORKER=8
          NUM_WORKERS=$(( (TOTAL_KEYS + KEYS_PER_WORKER - 1) / KEYS_PER_WORKER ))
          CONFIG_CONTENT="name = \"zen-ai-router-orchestrator\"\n"
          CONFIG_CONTENT+="main = \"src/index.mjs\"\n"
          CONFIG_CONTENT+="compatibility_date = \"2024-05-01\"\n\n"
          CONFIG_CONTENT+="[placement]\nmode = \"smart\"\n\n"
          CONFIG_CONTENT+="[[durable_objects.bindings]]\n" # Binding is still needed
          CONFIG_CONTENT+="name = \"ROUTER_COUNTER\"\n"
          CONFIG_CONTENT+="class_name = \"RouterCounter\"\n\n"
          # NO MIGRATIONS for new_sqlite_classes = ["RouterCounter"] here

          for i in $(seq 0 $((NUM_WORKERS - 1))); do
            CONFIG_CONTENT+="[[services]]\n"
            CONFIG_CONTENT+="binding = \"BACKEND_SERVICE_${i}\"\n"
            CONFIG_CONTENT+="service = \"zen-ai-router-worker-${i}\"\n\n"
          done
          echo -e "$CONFIG_CONTENT" > orchestrator/wrangler.toml
          echo "Generated orchestrator/wrangler.toml (without RouterCounter migration):"
          cat orchestrator/wrangler.toml

      - name: Attempt 2 of Deploy Orchestrator Worker (NO DO Migration for RouterCounter)
        id: deploy_orchestrator_attempt_2 # Step ID
        if: steps.deploy_orchestrator_attempt_1.outcome == 'failure' # Only run if first attempt failed
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PASS: ${{ secrets.PASS }}
        run: |
          echo "Attempting to deploy orchestrator worker without DO migration..."
          DEPLOY_OUTPUT=$(wrangler deploy --config orchestrator/wrangler.toml --var PASS:"${{ secrets.PASS }}" 2>&1)
          echo "$DEPLOY_OUTPUT"
          # Extract the URL from the output
          WORKER_URL=$(echo "$DEPLOY_OUTPUT" | grep -oP 'https://\S+\.workers\.dev' | head -n 1)
          if [ -n "$WORKER_URL" ]; then
            echo "ORCHESTRATOR_WORKER_URL=${WORKER_URL}" >> $GITHUB_OUTPUT
            echo "Successfully deployed orchestrator worker (Attempt 2). URL: $WORKER_URL"
          else
            echo "Warning: Could not extract worker URL from deployment output (Attempt 2)." >&2
          fi

      - name: Inject Orchestrator URL into Frontend
        run: |
          ORCHESTRATOR_URL_TO_INJECT=""
          if [ -n "${{ steps.deploy_orchestrator_attempt_1.outputs.ORCHESTRATOR_WORKER_URL }}" ]; then
            ORCHESTRATOR_URL_TO_INJECT="${{ steps.deploy_orchestrator_attempt_1.outputs.ORCHESTRATOR_WORKER_URL }}"
          elif [ -n "${{ steps.deploy_orchestrator_attempt_2.outputs.ORCHESTRATOR_WORKER_URL }}" ]; then
            ORCHESTRATOR_URL_TO_INJECT="${{ steps.deploy_orchestrator_attempt_2.outputs.ORCHESTRATOR_WORKER_URL }}"
          fi
          if [ -z "${ORCHESTRATOR_URL_TO_INJECT}" ]; then
            echo "Error: No Orchestrator Worker URL found from any attempt." >&2
            exit 1
          fi
          sed -i "s|window.ORCHESTRATOR_WORKER_URL = '';|window.ORCHESTRATOR_WORKER_URL = '${ORCHESTRATOR_URL_TO_INJECT}';|" tts/index.html

      - name: Prepare Frontend for GitHub Pages
        run: |
          mkdir -p pages
          cp tts/index.html pages/index.html

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'pages'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy_preview:
    runs-on: ubuntu-latest
    name: Deploy Preview
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Install Wrangler
        run: npm install -g wrangler
      - name: Prepare API Key Data
        id: prep_api_data
        env:
          ALL_API_KEYS_JSON_SECRET: ${{ secrets.ALL_API_KEYS_JSON }}
        run: |
          echo "Attempting to parse ALL_API_KEYS_JSON_SECRET..."
          API_KEYS_NEWLINE_SEPARATED=$(jq -e -r '.[]' <<< "$ALL_API_KEYS_JSON_SECRET")
          JQ_EXIT_CODE=$?
          if [ $JQ_EXIT_CODE -ne 0 ]; then
            echo "Error: jq failed to parse ALL_API_KEYS_JSON_SECRET. JQ Exit Code: $JQ_EXIT_CODE" >&2
            echo "Please validate the JSON structure of the ALL_API_KEYS_JSON_SECRET secret. The secret content will not be displayed." >&2
            exit 1
          fi
          mapfile -t API_KEYS_ARRAY <<< "$API_KEYS_NEWLINE_SEPARATED"
          local_api_keys_count=${#API_KEYS_ARRAY[@]}
          echo "Successfully parsed ${local_api_keys_count} keys."
          echo "all_api_keys_count=${local_api_keys_count}" >> $GITHUB_OUTPUT
          if [ "${local_api_keys_count}" -gt 0 ]; then
            API_KEYS_AS_JSON_ARRAY_STRING=$(printf "%s\n" "${API_KEYS_ARRAY[@]}" | jq -R . | jq -s .)
          else
            API_KEYS_AS_JSON_ARRAY_STRING="[]"
          fi
          echo "api_keys_as_json_array_string<<EOF_KEYS_JSON" >> $GITHUB_OUTPUT
          echo "${API_KEYS_AS_JSON_ARRAY_STRING}" >> $GITHUB_OUTPUT
          echo "EOF_KEYS_JSON" >> $GITHUB_OUTPUT

      - name: Ensure wrangler.toml for src Worker (Preview)
        run: |
          cp wrangler.toml.example wrangler.toml
          echo "Copied wrangler.toml.example to wrangler.toml for preview:"
          cat wrangler.toml

      - name: Deploy Single src Worker for PR Preview
        if: github.event_name == 'pull_request'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PASS: ${{ secrets.PASS }}
          API_KEYS_JSON_FROM_OUTPUT: ${{ steps.prep_api_data.outputs.api_keys_as_json_array_string }}
        run: |
          TOTAL_KEYS=${{ steps.prep_api_data.outputs.all_api_keys_count }}
          API_KEYS_JSON_STRING="$API_KEYS_JSON_FROM_OUTPUT"
          if [ -z "$API_KEYS_JSON_STRING" ]; then
            echo "Error: API_KEYS_JSON_FROM_OUTPUT was empty!" >&2
            exit 1
          fi
          if ! mapfile -t API_KEYS_ARRAY < <(jq -r '.[]' <<< "$API_KEYS_JSON_STRING"); then
            echo "Error: Could not re-parse api_keys_as_json_array_string from previous step." >&2
            echo "The string content will not be displayed." >&2
            exit 1
          fi
          if [ "${#API_KEYS_ARRAY[@]}" -ne "${TOTAL_KEYS}" ]; then
            echo "Warning: Key count mismatch after re-parsing. Expected ${TOTAL_KEYS}, got ${#API_KEYS_ARRAY[@]}." >&2
          fi
          echo "Successfully rehydrated ${#API_KEYS_ARRAY[@]} API keys for deployment."
          WORKER_NAME="zen-ai-router-worker-preview-${{ github.event.pull_request.number }}"
          ESCAPED_PASS=$(printf "%q" "${PASS}")
          echo "::add-mask::${ESCAPED_PASS}"
          WORKER_VARS="--var PASS:${ESCAPED_PASS}"
          CURRENT_KEY_INDEX=1
          for ((j=0; j<TOTAL_KEYS; j++)); do
            if [ "${j}" -lt "${#API_KEYS_ARRAY[@]}" ] && [ -n "${API_KEYS_ARRAY[j]}" ]; then
              ESCAPED_API_KEY=$(printf "%q" "${API_KEYS_ARRAY[j]}")
              echo "::add-mask::${ESCAPED_API_KEY}"
              WORKER_VARS="${WORKER_VARS} --var KEY${CURRENT_KEY_INDEX}:${ESCAPED_API_KEY}"
              CURRENT_KEY_INDEX=$((CURRENT_KEY_INDEX + 1))
            fi
          done
          # This will use the wrangler.toml created in the previous step if it exists
          wrangler deploy "src/worker.mjs" \
            --name "${WORKER_NAME}" \
            --compatibility-date "2024-05-01" \
            --compatibility-flags nodejs_compat \
            ${WORKER_VARS}

      - name: Comment PR with Preview URL
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workerName = `zen-ai-router-worker-preview-${{ github.event.pull_request.number }}`;
            const previewUrl = `https://${workerName}.workers.dev`; // Adjust domain if custom
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Worker preview for PR #${context.issue.number} deployed!\n\nPreview URL: ${previewUrl}\n\nCollected API Keys Count: ${{ steps.prep_api_data.outputs.all_api_keys_count }}`
            });

  cleanup_preview:
    runs-on: ubuntu-latest
    name: Cleanup Preview Environment
    if: github.event_name == 'pull_request_target' && github.event.action == 'closed'
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Wrangler
        run: npm install -g wrangler
      - name: Delete Preview src Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          SINGLE_WORKER_NAME="zen-ai-router-worker-preview-${{ github.event.pull_request.number }}"
          echo "Attempting to delete preview worker: ${SINGLE_WORKER_NAME}"
          wrangler delete --name "${SINGLE_WORKER_NAME}" --force || true
          echo "Preview worker deletion attempt complete."

name: Deploy Cloudflare Workers

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed] # Add closed to handle cleanup
  repository_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v4
      - name: Build & Deploy Worker
      - name: Prepare Worker Environment Variables
        run: |
          echo "CLOUDFLARE_ENV_VAR_PASS=${{ secrets.PASS }}" >> $GITHUB_ENV
          for i in $(seq 1 100); do
            KEY_NAME="KEY${i}"
            # Use indirect variable expansion to get the secret value
            KEY_VALUE=$(eval echo "\${{ secrets.${KEY_NAME} }}")
            if [ -z "$KEY_VALUE" ]; then
              break # Stop if a KEY{num} secret is not found (evaluates to empty string)
            fi
            echo "CLOUDFLARE_ENV_VAR_KEY${i}=${KEY_VALUE}" >> $GITHUB_ENV
          done
      - name: Copy wrangler.toml.example
        run: cp wrangler.toml.example wrangler.toml
      - name: Build & Deploy Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}

  deploy_preview:
    runs-on: ubuntu-latest
    name: Deploy Preview
    if: github.event.action != 'closed' # Don't deploy if the PR is closed
    steps:
      - uses: actions/checkout@v4

      - name: Generate PR Environment Name
        id: vars
        run: echo "pr_environment_name=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT

      - name: Build & Deploy Worker to PR Environment
      - name: Prepare Worker Environment Variables
        run: |
          echo "CLOUDFLARE_ENV_VAR_PASS=${{ secrets.PASS }}" >> $GITHUB_ENV
          for i in $(seq 1 100); do
            KEY_NAME="KEY${i}"
            # Use indirect variable expansion to get the secret value
            KEY_VALUE=$(eval echo "\${{ secrets.${KEY_NAME} }}")
            if [ -z "$KEY_VALUE" ]; then
              break # Stop if a KEY{num} secret is not found (evaluates to empty string)
            fi
            echo "CLOUDFLARE_ENV_VAR_KEY${i}=${KEY_VALUE}" >> $GITHUB_ENV
          done
      - name: Copy wrangler.toml.example
        run: cp wrangler.toml.example wrangler.toml
      - name: Build & Deploy Worker to PR Environment
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          # Use the environment input for wrangler
          # This will create/update an environment named e.g., "pr-123"
          # The URL will typically be <WORKER_NAME>.<PR_ENVIRONMENT_NAME>.<workers.dev>
          # or your custom domain if configured for environments.
          environment: ${{ steps.vars.outputs.pr_environment_name }}
          # Optionally, specify the worker name if not in wrangler.toml or if you want to override
          # name: "my-worker" # Replace with your worker's main name if needed

      - name: Comment PR with Preview URL
        if: success() # Only run if deployment was successful
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workerName = process.env.WORKER_NAME || 'your-worker-name'; // Get from env or hardcode
            const prEnv = "${{ steps.vars.outputs.pr_environment_name }}";
            // Adjust the URL structure based on your Cloudflare setup
            // Default for environments: <worker_name>.<environment_name>.workers.dev
            // Or if you have a custom domain routed to your worker: <environment_name>.<your_custom_domain>
            const previewUrl = `https://\${workerName}.\${prEnv}.workers.dev`; // Or your custom domain pattern

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Worker preview for PR #${context.issue.number} deployed!\n\nPreview URL: ${previewUrl}`
            });
        env:
          WORKER_NAME: "my-worker-name" # Replace with your actual worker name, or derive it if possible

  cleanup_preview:
    runs-on: ubuntu-latest
    name: Cleanup Preview Environment
    if: github.event.action == 'closed' # Run only when PR is closed
    steps:
      - name: Generate PR Environment Name
        id: vars
        run: echo "pr_environment_name=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT

      - name: Delete Worker PR Environment
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          # Use wrangler delete with the environment flag
          command: "delete --env ${{ steps.vars.outputs.pr_environment_name }} --force"
          # Ensure your wrangler.toml has the main worker name, or specify it here
          # name: "my-worker" # Replace with your worker's main name
        # Continue on error if environment doesn't exist (e.g., manual deletion)
        continue-on-error: true

  deploy-orchestrator:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Orchestrator Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          wranglerConfigFile: 'orchestrator/wrangler.toml'
          env: |
            BACKEND_SERVICE: zen-ai-router-worker # Explicitly bind to the main worker
